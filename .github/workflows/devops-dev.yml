# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: devops-dev

on:
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  unit-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
      
    - run: mvn test  
    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2.0.1
    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"    
    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report
        path: target/site/jacoco/

  code-analisys:
    runs-on: ubuntu-latest
    needs: unit-test
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build-DB
      run: |
           cd src/main/resources/oracle
           docker-compose build
      
    - name: Create-DB
      run: |
         cd src/main/resources/oracle 
         docker-compose up -d
           
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Wesley-Gomes_DevOps-Project
    
    - name: Check Quality Gate
      env: 
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        QUALITY_GATE_STATUS= $(curl -s "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Wesley-Gomes_DevOps-Project" -H "Authorization: Basic $SONAR_TOKEN" | jq -r '.projectStatus.status')
         if [ "$QUALITY_GATE_STATUS" = "OK" ]; then
           echo "QG OK"
         fi
         echo curl -s "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Wesley-Gomes_DevOps-Project" > result.json
          
  build:
    needs: [unit-test, code-analisys]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B clean package -DskipTests
